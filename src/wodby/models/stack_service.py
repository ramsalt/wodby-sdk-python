# coding: utf-8

"""
    Wodby API Client

    Wodby Developer Documentation https://wodby.com/docs/dev  # noqa: E501

    OpenAPI spec version: 3.0.3
    Contact: hello@wodby.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StackService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'docker_image': 'str',
        'id': 'str',
        'name': 'str',
        'title': 'str',
        'type': 'str',
        'type_title': 'str'
    }

    attribute_map = {
        'docker_image': 'docker_image',
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'type': 'type',
        'type_title': 'type_title'
    }

    def __init__(self, docker_image=None, id=None, name=None, title=None, type=None, type_title=None):  # noqa: E501
        """StackService - a model defined in Swagger"""  # noqa: E501

        self._docker_image = None
        self._id = None
        self._name = None
        self._title = None
        self._type = None
        self._type_title = None
        self.discriminator = None

        if docker_image is not None:
            self.docker_image = docker_image
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if type_title is not None:
            self.type_title = type_title

    @property
    def docker_image(self):
        """Gets the docker_image of this StackService.  # noqa: E501


        :return: The docker_image of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """Sets the docker_image of this StackService.


        :param docker_image: The docker_image of this StackService.  # noqa: E501
        :type: str
        """

        self._docker_image = docker_image

    @property
    def id(self):
        """Gets the id of this StackService.  # noqa: E501


        :return: The id of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StackService.


        :param id: The id of this StackService.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StackService.  # noqa: E501


        :return: The name of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StackService.


        :param name: The name of this StackService.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this StackService.  # noqa: E501


        :return: The title of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StackService.


        :param title: The title of this StackService.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this StackService.  # noqa: E501


        :return: The type of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StackService.


        :param type: The type of this StackService.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_title(self):
        """Gets the type_title of this StackService.  # noqa: E501


        :return: The type_title of this StackService.  # noqa: E501
        :rtype: str
        """
        return self._type_title

    @type_title.setter
    def type_title(self, type_title):
        """Sets the type_title of this StackService.


        :param type_title: The type_title of this StackService.  # noqa: E501
        :type: str
        """

        self._type_title = type_title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StackService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
